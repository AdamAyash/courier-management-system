CREATE OR ALTER PROCEDURE SP_UPDATE_ORDER_STATUSES
AS
BEGIN

CREATE TABLE #ORDERS
(
	ID					INT			NOT NULL,
	UPDATE_COUNTER		INT			NOT NULL,
	OFFICE_ID			INT			NOT NULL,
	COMPANY_ID			INT			NOT NULL,
	ORDER_TYPE_ID		INT			NOT NULL,
	EMPLOYEE_ID			INT			NOT NULL,
	CLIENT_ID			INT			NOT NULL,
	DATE_REGISTERED		DATETIME	NOT NULL,
	DELIVERY_DATE		DATETIME	NOT NULL,
	[STATUS]			TINYINT		NOT NULL,
	CONSTRAINT PK_ORDERS_ID PRIMARY KEY(ID),
	CONSTRAINT FK_ORDERS_OFFICES_ID FOREIGN KEY(OFFICE_ID) 
	REFERENCES OFFICES(ID),
	CONSTRAINT FK_ORDERS_COMPANIES_ID FOREIGN KEY(COMPANY_ID)
	REFERENCES COMPANIES(ID),
)

UPDATE ORDERS
SET [STATUS] = 0 /*DELIVERED*/
OUTPUT INSERTED.* INTO #ORDERS
WHERE DELIVERY_DATE >= CAST(GETDATE() AS DATE) AND [STATUS] = 1 /*NOT_DELIVERED*/

SET NOCOUNT ON

DECLARE @CLIENT_ID AS INT
DECLARE @ORDER_ID AS INT
DECLARE @CLIENT_USER_ID AS INT
DECLARE @NOTIFICATION_ID AS INT

DECLARE #ORDERS_CURSOR CURSOR FOR
SELECT ID, CLIENT_ID FROM #ORDERS

OPEN #ORDERS_CURSOR

FETCH NEXT FROM #ORDERS_CURSOR
INTO @ORDER_ID,  @CLIENT_ID

WHILE (@@FETCH_STATUS = 0 )
BEGIN

	EXEC SP_GENERATE_NEXT_UNIQUE_ID 'NOTIFICATIONS', @NOTIFICATION_ID OUTPUT

	SET @CLIENT_USER_ID = (SELECT [USER_ID] FROM CLIENTS WHERE ID = @CLIENT_ID)
	INSERT INTO NOTIFICATIONS
	SELECT
		@NOTIFICATION_ID														AS [ID],
		@CLIENT_USER_ID															AS [USER_ID],
		@ORDER_ID																AS [ORDER_ID],
		CONCAT('Order with ID - ',@ORDER_ID, ' was succsesfully delivered')		AS [MESSAGE],
		GETDATE()																AS [REGISTER_DATE],
		0																		AS [SEEN_BY_USER]
		
	FETCH NEXT FROM #ORDERS_CURSOR
	INTO  @ORDER_ID, @CLIENT_ID
END

CLOSE #ORDERS_CURSOR;
DEALLOCATE #ORDERS_CURSOR;

END
GO